# coding: utf-8

"""
    Protocol0 System API

    backend API for the Protocol0 Control Surface Script. Accessible via HTTP or via MIDI. Executes on python system version without Ableton python environment limitations  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""

from __future__ import absolute_import

import json
from typing import Any


# noinspection Mypy,DuplicatedCode
class DefaultApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def activate_rev2_editor(self, **kwargs):  # noqa: E501
        # type: (Any) -> None
        """Activate Rev2 Editor  # noqa: E501


        :rtype: object
        """

        obj = {
            "method": "activate_rev2_editor",
            "args": {

            }
        }

        from a_protocol_0 import Protocol0

        Protocol0.SELF.midiManager.send_string(json.dumps(obj))

    def arrow_down(self, **kwargs):  # noqa: E501
        # type: (Any) -> None
        """Arrow Down  # noqa: E501


        :rtype: object
        """

        obj = {
            "method": "arrow_down",
            "args": {

            }
        }

        from a_protocol_0 import Protocol0

        Protocol0.SELF.midiManager.send_string(json.dumps(obj))

    def arrow_up(self, **kwargs):  # noqa: E501
        # type: (Any) -> None
        """Arrow Up  # noqa: E501


        :rtype: object
        """

        obj = {
            "method": "arrow_up",
            "args": {

            }
        }

        from a_protocol_0 import Protocol0

        Protocol0.SELF.midiManager.send_string(json.dumps(obj))

    def bad_request(self, **kwargs):  # noqa: E501
        # type: (Any) -> None
        """Bad Request  # noqa: E501


        :rtype: object
        """

        obj = {
            "method": "bad_request",
            "args": {

            }
        }

        from a_protocol_0 import Protocol0

        Protocol0.SELF.midiManager.send_string(json.dumps(obj))

    def click(self, x, y, **kwargs):  # noqa: E501
        # type: (int, int, Any) -> None
        """Click  # noqa: E501


        :param x: (required)
        :type x: int
        :param y: (required)
        :type y: int
        :rtype: object
        """

        obj = {
            "method": "click",
            "args": {
                "x": x,
                "y": y,

            }
        }

        from a_protocol_0 import Protocol0

        Protocol0.SELF.midiManager.send_string(json.dumps(obj))

    def double_click(self, x, y, **kwargs):  # noqa: E501
        # type: (int, int, Any) -> None
        """Double Click  # noqa: E501s


        :param x: (required)
        :type x: int
        :param y: (required)
        :type y: int
        :rtype: object
        """

        obj = {
            "method": "double_click",
            "args": {
                "x": x,
                "y": y,

            }
        }

        from a_protocol_0 import Protocol0

        Protocol0.SELF.midiManager.send_string(json.dumps(obj))

    def focus_window(self, window_name, **kwargs):  # noqa: E501
        # type: (str, Any) -> None
        """Focus Window  # noqa: E501


        :param window_name: (required)
        :type window_name: str
        :rtype: object
        """

        obj = {
            "method": "focus_window",
            "args": {
                "window_name": window_name,

            }
        }

        from a_protocol_0 import Protocol0

        Protocol0.SELF.midiManager.send_string(json.dumps(obj))

    def health(self, **kwargs):  # noqa: E501
        # type: (Any) -> None
        """Health  # noqa: E501


        :rtype: object
        """

        obj = {
            "method": "health",
            "args": {

            }
        }

        from a_protocol_0 import Protocol0

        Protocol0.SELF.midiManager.send_string(json.dumps(obj))

    def hide_plugins(self, **kwargs):  # noqa: E501
        # type: (Any) -> None
        """Hide Plugins  # noqa: E501


        :rtype: object
        """

        obj = {
            "method": "hide_plugins",
            "args": {

            }
        }

        from a_protocol_0 import Protocol0

        Protocol0.SELF.midiManager.send_string(json.dumps(obj))

    def index(self, **kwargs):  # noqa: E501
        # type: (Any) -> None
        """Index  # noqa: E501


        :rtype: object
        """

        obj = {
            "method": "index",
            "args": {

            }
        }

        from a_protocol_0 import Protocol0

        Protocol0.SELF.midiManager.send_string(json.dumps(obj))

    def pixel_has_color(self, x, y, color, **kwargs):  # noqa: E501
        # type: (int, int, str, Any) -> None
        """Pixel Has Color  # noqa: E501


        :param x: (required)
        :type x: int
        :param y: (required)
        :type y: int
        :param color: (required)
        :type color: str
        :rtype: bool
        """

        obj = {
            "method": "pixel_has_color",
            "args": {
                "x": x,
                "y": y,
                "color": color,

            }
        }

        from a_protocol_0 import Protocol0

        Protocol0.SELF.midiManager.send_string(json.dumps(obj))

    def reload_ableton(self, **kwargs):  # noqa: E501
        # type: (Any) -> None
        """Reload Ableton  # noqa: E501


        :rtype: object
        """

        obj = {
            "method": "reload_ableton",
            "args": {

            }
        }

        from a_protocol_0 import Protocol0

        Protocol0.SELF.midiManager.send_string(json.dumps(obj))

    def search(self, search, **kwargs):  # noqa: E501
        # type: (str, Any) -> None
        """Search  # noqa: E501


        :param search: (required)
        :type search: str
        :rtype: object
        """

        obj = {
            "method": "search",
            "args": {
                "search": search,

            }
        }

        from a_protocol_0 import Protocol0

        Protocol0.SELF.midiManager.send_string(json.dumps(obj))

    def show_device_view(self, **kwargs):  # noqa: E501
        # type: (Any) -> None
        """Show Device View  # noqa: E501


        :rtype: object
        """

        obj = {
            "method": "show_device_view",
            "args": {

            }
        }

        from a_protocol_0 import Protocol0

        Protocol0.SELF.midiManager.send_string(json.dumps(obj))

    def show_hide_plugins(self, **kwargs):  # noqa: E501
        # type: (Any) -> None
        """Show Hide Plugins  # noqa: E501


        :rtype: object
        """

        obj = {
            "method": "show_hide_plugins",
            "args": {

            }
        }

        from a_protocol_0 import Protocol0

        Protocol0.SELF.midiManager.send_string(json.dumps(obj))

    def show_plugins(self, **kwargs):  # noqa: E501
        # type: (Any) -> None
        """Show Plugins  # noqa: E501


        :rtype: object
        """

        obj = {
            "method": "show_plugins",
            "args": {

            }
        }

        from a_protocol_0 import Protocol0

        Protocol0.SELF.midiManager.send_string(json.dumps(obj))

    def show_windows(self, **kwargs):  # noqa: E501
        # type: (Any) -> None
        """Show Windows  # noqa: E501


        :rtype: object
        """

        obj = {
            "method": "show_windows",
            "args": {

            }
        }

        from a_protocol_0 import Protocol0

        Protocol0.SELF.midiManager.send_string(json.dumps(obj))

    def sync_presets(self, **kwargs):  # noqa: E501
        # type: (Any) -> None
        """Sync Presets  # noqa: E501


        :rtype: str
        """

        obj = {
            "method": "sync_presets",
            "args": {

            }
        }

        from a_protocol_0 import Protocol0

        Protocol0.SELF.midiManager.send_string(json.dumps(obj))

    def toggle_ableton_button(self, x, y, activate, **kwargs):  # noqa: E501
        # type: (int, int, bool, Any) -> None
        """Toggle Ableton Button  # noqa: E501


        :param x: (required)
        :type x: int
        :param y: (required)
        :type y: int
        :param activate: (required)
        :type activate: bool
        :rtype: object
        """

        obj = {
            "method": "toggle_ableton_button",
            "args": {
                "x": x,
                "y": y,
                "activate": activate,

            }
        }

        from a_protocol_0 import Protocol0

        Protocol0.SELF.midiManager.send_string(json.dumps(obj))
